import glob
import os
from src.text_processor import DocumentProcessor
from langchain.text_splitter import RecursiveCharacterTextSplitter
import warnings

FOLDER_PATH = "data"

def test_document_chunking():
    """H√†m test chunking v·ªõi c√°c tham s·ªë kh√°c nhau"""
    # L·∫•y danh s√°ch t·∫•t c·∫£ c√°c file
    pdf_files = glob.glob(os.path.join(FOLDER_PATH, "*.pdf"))
    word_files = glob.glob(os.path.join(FOLDER_PATH, "*.docx*"))
    txt_files = glob.glob(os.path.join(FOLDER_PATH, "*.txt"))
    all_files = pdf_files + word_files + txt_files

    if not all_files:
        print("‚ùå Kh√¥ng t√¨m th·∫•y file n√†o trong th∆∞ m·ª•c data")
        return

    while True:
        print(f"\nüóÇÔ∏è Danh s√°ch file t√¨m th·∫•y ({len(all_files)} file):")
        for idx, file in enumerate(all_files, 1):
            print(f"{idx}. {os.path.basename(file)}")
        
        choice = input("\nCh·ªçn s·ªë th·ª© t·ª± file mu·ªën test chunking (0 ƒë·ªÉ tho√°t): ")
        if choice == "0":
            break
            
        try:
            idx = int(choice) - 1
            if 0 <= idx < len(all_files):
                file_path = all_files[idx]
                test_chunking_parameters(file_path)
            else:
                print("‚ùå S·ªë th·ª© t·ª± kh√¥ng h·ª£p l·ªá!")
        except ValueError:
            print("‚ùå Vui l√≤ng nh·∫≠p s·ªë!")

def test_chunking_parameters(file_path):
    """Test chunking v·ªõi c√°c tham s·ªë kh√°c nhau cho m·ªôt file"""
    print(f"\n{'='*100}")
    print(f"üìÑ File: {os.path.basename(file_path)}")
    print(f"üìç ƒê∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß: {file_path}")
    print(f"üìä K√≠ch th∆∞·ªõc: {os.path.getsize(file_path)/1024:.2f} KB")
    print(f"{'='*100}\n")

    try:
        # ƒê·ªçc n·ªôi dung file
        loader = DocumentProcessor.load_document(file_path)
        pages = loader.load_and_split()
        content = "\n\n".join(str(p.page_content) for p in pages)
        
        # Th√™m c√°c tham s·ªë ƒë∆∞·ª£c ƒë·ªÅ xu·∫•t
        suggested_params = [
            {"chunk_size": 500, "chunk_overlap": 50},
            {"chunk_size": 1000, "chunk_overlap": 100},
            {"chunk_size": 2000, "chunk_overlap": 200},
        ]
        
        print("\nüìä THAM S·ªê ƒê·ªÄ XU·∫§T:")
        for i, params in enumerate(suggested_params, 1):
            print(f"{i}. chunk_size: {params['chunk_size']}, chunk_overlap: {params['chunk_overlap']}")
        
        while True:
            print("\nüîß THI·∫æT L·∫¨P THAM S·ªê CHUNKING:")
            try:
                chunk_size = int(input("Nh·∫≠p chunk_size (VD: 1000): "))
                chunk_overlap = int(input("Nh·∫≠p chunk_overlap (VD: 50): "))
                
                if chunk_overlap >= chunk_size:
                    print("‚ùå chunk_overlap ph·∫£i nh·ªè h∆°n chunk_size!")
                    continue
                
                # Th·ª±c hi·ªán chunking v·ªõi tham s·ªë m·ªõi
                text_splitter = RecursiveCharacterTextSplitter(
                    chunk_size=chunk_size,
                    chunk_overlap=chunk_overlap
                )
                chunks = text_splitter.split_text(content)
                
                print(f"\nüìä K·∫æT QU·∫¢ CHUNKING:")
                print(f"T·ªïng s·ªë chunk: {len(chunks)}")
                print(f"{'Index':<8} {'ƒê·ªô d√†i':<10} {'Overlap':<10} {'Preview':<50}")
                print("-" * 78)
                
                for idx, chunk in enumerate(chunks):
                    # T√≠nh overlap v·ªõi chunk ti·∫øp theo
                    overlap_text = ""
                    if idx < len(chunks) - 1:
                        next_chunk = chunks[idx + 1]
                        overlap_text = find_overlap(chunk, next_chunk)
                    
                    # Hi·ªÉn th·ªã preview c·ªßa chunk (50 k√Ω t·ª± ƒë·∫ßu)
                    preview = chunk[:50].replace('\n', ' ').strip() + "..."
                    print(f"{idx:<8} {len(chunk):<10} {len(overlap_text) if overlap_text else 0:<10} {preview:<50}")
                
                # ƒê√°nh gi√° ch·∫•t l∆∞·ª£ng chunking
                avg_chunk_size = sum(len(chunk) for chunk in chunks) / len(chunks)
                avg_overlap = sum(len(find_overlap(chunks[i], chunks[i+1])) 
                                for i in range(len(chunks)-1)) / (len(chunks)-1) if len(chunks) > 1 else 0
                
                print(f"\nüìà ƒê√ÅNH GI√Å CH·∫§T L∆Ø·ª¢NG CHUNKING:")
                print(f"- S·ªë l∆∞·ª£ng chunk: {len(chunks)}")
                print(f"- ƒê·ªô d√†i chunk trung b√¨nh: {avg_chunk_size:.1f} k√Ω t·ª±")
                print(f"- Overlap trung b√¨nh: {avg_overlap:.1f} k√Ω t·ª±")
                print(f"- ƒê√°nh gi√°: ", end="")
                
                if avg_chunk_size < 200:
                    print("‚ùå Chunk qu√° ng·∫Øn, n√™n tƒÉng chunk_size")
                elif avg_chunk_size > 2000:
                    print("‚ùå Chunk qu√° d√†i, n√™n gi·∫£m chunk_size")
                elif avg_overlap < chunk_overlap * 0.5:
                    print("‚ö†Ô∏è Overlap th·ª±c t·∫ø th·∫•p h∆°n mong ƒë·ª£i")
                else:
                    print("‚úÖ Tham s·ªë ph√π h·ª£p")

                while True:
                    chunk_idx = input("\nNh·∫≠p s·ªë th·ª© t·ª± chunk mu·ªën xem (-1 ƒë·ªÉ th·ª≠ tham s·ªë kh√°c): ")
                    if chunk_idx == "-1":
                        break
                    
                    try:
                        chunk_idx = int(chunk_idx)
                        if 0 <= chunk_idx < len(chunks):
                            print(f"\nüìù N·ªòI DUNG CHUNK {chunk_idx}:")
                            print("-" * 100)
                            print(chunks[chunk_idx])
                            print("-" * 100)
                        else:
                            print("‚ùå S·ªë th·ª© t·ª± chunk kh√¥ng h·ª£p l·ªá!")
                    except ValueError:
                        print("‚ùå Vui l√≤ng nh·∫≠p s·ªë!")
                
            except ValueError:
                print("‚ùå Vui l√≤ng nh·∫≠p s·ªë cho c√°c tham s·ªë!")
                
    except Exception as e:
        print(f"‚ùå L·ªói khi x·ª≠ l√Ω file: {str(e)}")

def find_overlap(text1, text2):
    """T√¨m ph·∫ßn overlap gi·ªØa hai ƒëo·∫°n text"""
    # T√¨m ƒëo·∫°n text chung d√†i nh·∫•t ·ªü cu·ªëi text1 v√† ƒë·∫ßu text2
    min_len = min(len(text1), len(text2))
    for i in range(min_len, 0, -1):
        if text1[-i:] == text2[:i]:
            return text1[-i:]
    return ""

if __name__ == "__main__":
    warnings.filterwarnings("ignore")
    test_document_chunking() 